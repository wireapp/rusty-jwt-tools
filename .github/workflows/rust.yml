name: Rust compile & test

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 'stable'
          rustflags: '-D warnings -W unreachable-pub'
      - run: RUSTDOCFLAGS="-D warnings" cargo doc --all --no-deps

  check:
    runs-on: ubuntu-latest
    env:
        # Manually list packages that support Wasm, because Cargo does not
        # have a simple way to exclude specific packages on unsupported platforms.
        # Notably missing from the list here is test-wire-server.
        WASM_PACKAGES: "-p wire-e2e-identity -p rusty-jwt-tools -p rusty-jwt-tools-ffi -p rusty-acme -p rusty-x509-check"
    steps:
      - uses: actions/checkout@v5
      - name: ensure tags are signed
        run: |
          if [[ ${{ github.ref_type }} == tag ]]; then
            git fetch -f origin ${{ github.ref }}:${{ github.ref }}
            git cat-file tag ${{ github.ref_name }} | grep -q -- '-----BEGIN PGP SIGNATURE-----'
          fi
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          rustflags: '-D warnings'
          target: wasm32-unknown-unknown
      - run: cargo fmt --all -- --check
      - run: cargo clippy --locked -- -D warnings
      - run: cargo clippy --locked --target wasm32-unknown-unknown ${WASM_PACKAGES} -- -D warnings
      - run: cargo check --tests --locked
      - run: cargo check --tests --locked --target wasm32-unknown-unknown ${WASM_PACKAGES}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - run: cargo build --locked

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - uses: taiki-e/install-action@nextest
      - name: "Test rusty-jwt-tools"
        run: sh run-tests.sh
      - name: "Upload test results"
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
            files: target/nextest/default/junit.xml

  haskell-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: haskell-actions/setup@v2
        with:
            ghc-version: '9.2'
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - uses: davidB/rust-cargo-make@v1
      - name: "Run Haskell test"
        run: cd ffi && cargo make hs-test

  wasm-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ["jwt", "acme", "e2e-identity"]
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: WASM build
        run: wasm-pack build --dev --target web ${{ matrix.workspace }}

  wasm-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ["jwt", "acme", "e2e-identity"]
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Run tests (wasm)
        run: wasm-pack test --headless --chrome ${{ matrix.workspace }}

  hack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          toolchain: 'stable'
      - uses: taiki-e/install-action@cargo-hack
      - name: cargo/hack (verify features compile in isolation)
        run: cargo hack check --each-feature --no-dev-deps
