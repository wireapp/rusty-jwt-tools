use clap::{Parser, Subcommand};

pub mod access_generate;
pub mod access_verify;
pub mod build;
pub mod jwk;
pub mod parse;
pub mod pem;
pub mod utils;

/// Simple program to greet a person
#[derive(Debug, Parser)]
#[command(
    version,
    about,
    name = "rusty-jwt-cli",
    bin_name = "rusty-jwt-cli",
    rename_all = "kebab-case"
)]
pub struct RustyCli {
    #[clap(subcommand)]
    pub cmd: Commands,
}

#[derive(Debug, Subcommand)]
#[allow(clippy::enum_variant_names)]
pub enum Commands {
    /// Create a new JWT
    JwtBuild {
        #[command(flatten)]
        delegate: build::BuildJwt,
    },
    /// Parse (debug) a JWT
    JwtParse {
        #[command(flatten)]
        delegate: parse::ParseJwt,
    },
    /// Parse (debug) a PEM key into JWK (with thumbprint)
    JwkParse {
        #[command(flatten)]
        delegate: jwk::ParseJwk,
    },
    /// Verify an access token generated by wire-server for e2e identity purpose
    VerifyAccess {
        #[command(flatten)]
        delegate: access_verify::AccessVerify,
    },
    /// Generates a Dpop access token for testing purposes
    GenerateAccess {
        #[command(flatten)]
        delegate: access_generate::AccessGenerate,
    },
}
